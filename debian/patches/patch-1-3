This patch was downloaded from:
ftp://emboss.open-bio.org/pub/EMBOSS/fixes/patches/patch-1-3.gz

Explanations for the changes are pasted from:
ftp://emboss.open-bio.org/pub/EMBOSS/fixes/README.fixes

Fix 1. EMBOSS-5.0.0/emboss/psiphi.c

27 Jul 2007: Fixes a problem with reading more recent CCF files.
             Error traps cases where chains have no atom information.

Fix 2. EMBOSS-5.0.0/ajax/ajindex.c

9 Jan 2008: Fixes rare secondary index problem with input files over 2Gb.

Fix 3. EMBOSS-5.0.0/nucleus/embindex.c

18 Jan 2008: Order and fill fixes to sort out potential problems
             with kw/de/tx indexes.

Fix 4. EMBOSS-5.0.0/ajax/ajseqdb.c

19 Feb 2008: Fixes changed ID format in GCG databases.
             Fixes reading from PIR databases

Fix 5. EMBOSS-5.0.0/ajax/ajseqtype.c

19 Feb 2008: Fixes a problem with O in protein sequences for pyrrolysine.
             Lower case o worked, but upper case O was excluded as a
             gap character in early versions of PHYLIP. 'O' is no
             longer a gap character in EMBOSS.

Fix 6. EMBOSS-5.0.0/ajax/ajseqwrite.c

19 Feb 2008: Fixes a problem in GENBANK output format for mulitple
             lines of ACCESSION or KEYWORD records in an entry.

Fix 7. EMBOSS-5.0.0/ajax/ajseqread.c

19 Feb 2008: Fixes a problem in reading protein sequences from the
             Staden "spin" interface. The partial EMBL/SwissProt
             format was set to "nucleotide". All incomplete
             EMBL/SwissProt entries are now tested for amino acid
             characters and set to protein if any non-nucleotide
             characters are found.


Fix 8. EMBOSS-5.0.0/emboss/dbxfasta.c

19 Feb 2008: Fixes tokens that are longer than the maximum length in
             the resource definition.
             For IDs issues a warning when any ID is truncated.

diff -c -N --recursive EMBOSS-5.0.0old/ajax/ajindex.c EMBOSS-5.0.0/ajax/ajindex.c
*** EMBOSS-5.0.0old/ajax/ajindex.c	2007-07-06 13:18:48.000000000 +0100
--- EMBOSS-5.0.0/ajax/ajindex.c	2008-01-19 13:05:35.000000000 +0000
***************
*** 2516,2522 ****
  
  static ajint btreeNumIdCompare(const void *a, const void *b)
  {
!     return (*(AjPBtNumId const *)a)->offset - (*(AjPBtNumId const *)b)->offset;
  }
  
  
--- 2516,2529 ----
  
  static ajint btreeNumIdCompare(const void *a, const void *b)
  {
!   ajlong val;
! 
!     val = (*(AjPBtNumId const *)a)->offset - (*(AjPBtNumId const *)b)->offset;
! 
!     if(!val)
!       return 0;
! 
!     return (val < 0L) ? -1 : 1;
  }
  
  
***************
*** 11956,11963 ****
  
  static ajint btreeOffsetCompare(const void *a, const void *b)
  {
!     return (*(AjPBtId const *)a)->offset -
! 		  (*(AjPBtId const *)b)->offset;
  }
  
  
--- 11963,11976 ----
  
  static ajint btreeOffsetCompare(const void *a, const void *b)
  {
!   ajlong val;
! 
!     val = (*(AjPBtId const *)a)->offset - (*(AjPBtId const *)b)->offset;
! 
!     if(!val)
!       return 0;
! 
!     return (val < 0L) ? -1 : 1;
  }
  
  
diff -c -N --recursive EMBOSS-5.0.0old/emboss/psiphi.c EMBOSS-5.0.0/emboss/psiphi.c
*** EMBOSS-5.0.0old/emboss/psiphi.c	2007-07-06 13:15:29.000000000 +0100
--- EMBOSS-5.0.0/emboss/psiphi.c	2008-01-19 13:05:35.000000000 +0000
***************
*** 160,166 ****
      finishres = ajAcdGetInt("finishresiduenumber");
  
      /* reserve memory for and read in structure */
!     /* JISON */    pdb = ajPdbReadoldNew(pdbfile);
      
      /* check and set number of chain to be analysed */
      highest = pdb->Nchn;
--- 160,166 ----
      finishres = ajAcdGetInt("finishresiduenumber");
  
      /* reserve memory for and read in structure */
!     /* JISON */    pdb = ajPdbReadNew(pdbfile,0);
      
      /* check and set number of chain to be analysed */
      highest = pdb->Nchn;
***************
*** 440,445 ****
--- 440,448 ----
      ajint lowestres = 0;
  
      AjPAtom inlist   = NULL;
+ 
+     if(!ajListGetLength(pdb->Chains[myindex]->Atoms))
+ 	ajFatal("Chain %d has no atoms",myindex+1);
      
      /* read first atom in list into memory, but keep it on list */
      ajListPeek(pdb->Chains[myindex]->Atoms,
diff -c -N --recursive EMBOSS-5.0.0old/nucleus/embindex.c EMBOSS-5.0.0/nucleus/embindex.c
*** EMBOSS-5.0.0old/nucleus/embindex.c	2007-07-06 13:15:00.000000000 +0100
--- EMBOSS-5.0.0/nucleus/embindex.c	2008-01-19 13:05:44.000000000 +0000
***************
*** 1196,1208 ****
      entry->txorder = (entry->pagesize - 60) / ((entry->txlen + 1) + 12);
      entry->txfill  = (entry->pagesize - 16) / (entry->txlen + 28);
  
!     entry->kwsecorder = (entry->pagesize - 60) / ((entry->idlen + 1) + 12);
!     entry->desecorder = (entry->pagesize - 60) / ((entry->idlen + 1) + 12);
!     entry->txsecorder = (entry->pagesize - 60) / ((entry->idlen + 1) + 12);
! 
!     entry->kwsecfill  = (entry->pagesize - 16) / (entry->idlen + 4);
!     entry->desecfill  = (entry->pagesize - 16) / (entry->idlen + 4);
!     entry->txsecfill  = (entry->pagesize - 16) / (entry->idlen + 4);
  
      entry->idsecorder = (entry->pagesize - 60) / 24;
      entry->idsecfill  = (entry->pagesize - 60) / 20;
--- 1196,1208 ----
      entry->txorder = (entry->pagesize - 60) / ((entry->txlen + 1) + 12);
      entry->txfill  = (entry->pagesize - 16) / (entry->txlen + 28);
  
!     entry->kwsecorder = (entry->pagesize - 60) / ((entry->kwlen + 1) + 12);
!     entry->desecorder = (entry->pagesize - 60) / ((entry->delen + 1) + 12);
!     entry->txsecorder = (entry->pagesize - 60) / ((entry->txlen + 1) + 12);
! 
!     entry->kwsecfill  = (entry->pagesize - 16) / (entry->kwlen + 4);
!     entry->desecfill  = (entry->pagesize - 16) / (entry->delen + 4);
!     entry->txsecfill  = (entry->pagesize - 16) / (entry->txlen + 4);
  
      entry->idsecorder = (entry->pagesize - 60) / 24;
      entry->idsecfill  = (entry->pagesize - 60) / 20;
***************
*** 1251,1257 ****
  					     entry->cachesize,
  					     entry->idsecorder, slevel,
  					     entry->idsecfill, count,
! 					     entry->kwlen);
  	if(!entry->idcache)
  	    ajFatal("Cannot open ID index");
  	
--- 1251,1257 ----
  					     entry->cachesize,
  					     entry->idsecorder, slevel,
  					     entry->idsecfill, count,
! 					     entry->idlen);
  	if(!entry->idcache)
  	    ajFatal("Cannot open ID index");
  	
***************
*** 1267,1273 ****
  					     entry->cachesize,
  					     entry->acsecorder, slevel,
  					     entry->acsecfill, count,
! 					     entry->kwlen);
  	if(!entry->accache)
  	    ajFatal("Cannot open ACC index");
  
--- 1267,1273 ----
  					     entry->cachesize,
  					     entry->acsecorder, slevel,
  					     entry->acsecfill, count,
! 					     entry->aclen);
  	if(!entry->accache)
  	    ajFatal("Cannot open ACC index");
  
***************
*** 1282,1288 ****
  					     entry->cachesize,
  					     entry->svsecorder, slevel,
  					     entry->svsecfill, count,
! 					     entry->kwlen);
  	if(!entry->svcache)
  	    ajFatal("Cannot open SV index");
  
--- 1282,1288 ----
  					     entry->cachesize,
  					     entry->svsecorder, slevel,
  					     entry->svsecfill, count,
! 					     entry->svlen);
  	if(!entry->svcache)
  	    ajFatal("Cannot open SV index");
  
